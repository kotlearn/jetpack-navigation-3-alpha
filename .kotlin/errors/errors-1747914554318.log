kotlin version: 2.1.20
error message: org.jetbrains.kotlin.backend.common.BackendException: Backend Internal error: Exception during IR lowering
File being compiled: /Users/sam/Documents/projects/kotlearn/misc/jetpack_navigation_3/notes/src/main/java/com/kotlearn/jetpack_navigation_3/notes/detail/NoteDetailScreen.kt
The root cause java.lang.RuntimeException was thrown at: org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:48)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException(CodegenUtil.kt:107)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException$default(CodegenUtil.kt:90)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:54)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:41)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:27)
	at org.jetbrains.kotlin.config.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.runCodegen$cli(KotlinToJVMBytecodeCompiler.kt:413)
	at org.jetbrains.kotlin.cli.pipeline.jvm.JvmBackendPipelinePhase.executePhase(JvmBackendPipelinePhase.kt:98)
	at org.jetbrains.kotlin.cli.pipeline.jvm.JvmBackendPipelinePhase.executePhase(JvmBackendPipelinePhase.kt:30)
	at org.jetbrains.kotlin.cli.pipeline.PipelinePhase.phaseBody(PipelinePhase.kt:68)
	at org.jetbrains.kotlin.cli.pipeline.PipelinePhase.phaseBody(PipelinePhase.kt:58)
	at org.jetbrains.kotlin.config.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:215)
	at org.jetbrains.kotlin.config.phaser.NamedCompilerPhase.invoke(CompilerPhase.kt:111)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:28)
	at org.jetbrains.kotlin.config.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.cli.pipeline.AbstractCliPipeline.runPhasedPipeline(AbstractCliPipeline.kt:106)
	at org.jetbrains.kotlin.cli.pipeline.AbstractCliPipeline.execute(AbstractCliPipeline.kt:65)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecutePhased(K2JVMCompiler.kt:61)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecutePhased(K2JVMCompiler.kt:36)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:80)
	at org.jetbrains.kotlin.cli.common.CLICompiler.exec(CLICompiler.kt:337)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:466)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:75)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:514)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:431)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:310)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:137)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:678)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1805)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.base/java.lang.Thread.run(Unknown Source)
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN name:NoteDetailScreen visibility:public modality:FINAL <> (noteId:kotlin.Long) returnType:kotlin.Unit
  annotations:
    Composable
  VALUE_PARAMETER name:noteId index:0 type:kotlin.Long
  BLOCK_BODY
    VAR PROPERTY_DELEGATE name:note$delegate type:androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?> [val]
      CALL 'public final fun remember <T> (key1: kotlin.Any?, calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?> origin=null
        <T>: androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?>
        key1: GET_VAR 'noteId: kotlin.Long declared in com.kotlearn.jetpack_navigation_3.notes.detail.NoteDetailScreenKt.NoteDetailScreen' type=kotlin.Long origin=null
        calculation: BLOCK type=kotlin.Function0<androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?>> origin=LAMBDA
          COMPOSITE type=kotlin.Unit origin=null
          FUNCTION_REFERENCE 'private final fun NoteDetailScreen$lambda$0 ($noteId: kotlin.Long): androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?> declared in com.kotlearn.jetpack_navigation_3.notes.detail.NoteDetailScreenKt' type=kotlin.Function0<androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?>> origin=INLINE_LAMBDA reflectionTarget=null
            $noteId: GET_VAR 'noteId: kotlin.Long declared in com.kotlearn.jetpack_navigation_3.notes.detail.NoteDetailScreenKt.NoteDetailScreen' type=kotlin.Long origin=null
    WHEN type=kotlin.Unit origin=IF
      BRANCH
        if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
          arg0: CALL 'private final fun NoteDetailScreen$lambda$1 ($note$delegate: androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?>): com.kotlearn.jetpack_navigation_3.notes.Note? declared in com.kotlearn.jetpack_navigation_3.notes.detail.NoteDetailScreenKt' type=com.kotlearn.jetpack_navigation_3.notes.Note? origin=GET_LOCAL_PROPERTY
            $note$delegate: GET_VAR 'val note$delegate: androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?> [val] declared in com.kotlearn.jetpack_navigation_3.notes.detail.NoteDetailScreenKt.NoteDetailScreen' type=androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?> origin=null
          arg1: CONST Null type=kotlin.Nothing? value=null
        then: BLOCK type=kotlin.Unit origin=null
          CALL 'public final fun Text-80ic1_w$default (text: kotlin.String, modifier: androidx.compose.ui.Modifier?, color: androidx.compose.ui.graphics.Color, fontSize: androidx.compose.ui.unit.TextUnit, fontStyle: androidx.compose.ui.text.font.FontStyle?, fontWeight: androidx.compose.ui.text.font.FontWeight?, fontFamily: androidx.compose.ui.text.font.FontFamily?, letterSpacing: androidx.compose.ui.unit.TextUnit, textDecoration: androidx.compose.ui.text.style.TextDecoration?, textAlign: androidx.compose.ui.text.style.TextAlign?, lineHeight: androidx.compose.ui.unit.TextUnit, overflow: androidx.compose.ui.text.style.TextOverflow, softWrap: kotlin.Boolean, maxLines: kotlin.Int, minLines: kotlin.Int, onTextLayout: kotlin.Function1<androidx.compose.ui.text.TextLayoutResult, kotlin.Unit>?, style: androidx.compose.ui.text.TextStyle?, $mask0: kotlin.Int, $handler: kotlin.Any?): kotlin.Unit declared in androidx.compose.material3.TextKt' type=kotlin.Unit origin=DEFAULT_DISPATCH_CALL
            text: CONST String type=kotlin.String value="Note not found."
            modifier: CALL 'public final fun wrapContentSize$default (align: androidx.compose.ui.Alignment?, unbounded: kotlin.Boolean, $mask0: kotlin.Int, $handler: kotlin.Any?): androidx.compose.ui.Modifier declared in androidx.compose.foundation.layout.SizeKt' type=androidx.compose.ui.Modifier origin=DEFAULT_DISPATCH_CALL
              $receiver: CALL 'public final fun fillMaxSize$default (fraction: kotlin.Float, $mask0: kotlin.Int, $handler: kotlin.Any?): androidx.compose.ui.Modifier declared in androidx.compose.foundation.layout.SizeKt' type=androidx.compose.ui.Modifier origin=DEFAULT_DISPATCH_CALL
                $receiver: GET_FIELD 'FIELD FIELD_FOR_OBJECT_INSTANCE name:Companion type:androidx.compose.ui.Modifier.Companion visibility:public [final,static] declared in androidx.compose.ui.Modifier' type=androidx.compose.ui.Modifier.Companion origin=null
                fraction: COMPOSITE type=kotlin.Float origin=DEFAULT_VALUE
                  CONST Float type=kotlin.Float value=0.0
                $mask0: CONST Int type=kotlin.Int value=1
                $handler: CONST Null type=kotlin.Any? value=null
              align: CALL 'public final fun <get-Center> (): androidx.compose.ui.Alignment declared in androidx.compose.ui.Alignment.Companion' type=androidx.compose.ui.Alignment origin=GET_PROPERTY
                $this: GET_FIELD 'FIELD FIELD_FOR_OBJECT_INSTANCE name:Companion type:androidx.compose.ui.Alignment.Companion visibility:public [final,static] declared in androidx.compose.ui.Alignment' type=androidx.compose.ui.Alignment.Companion origin=null
              unbounded: COMPOSITE type=kotlin.Boolean origin=DEFAULT_VALUE
                CONST Boolean type=kotlin.Boolean value=false
              $mask0: CONST Int type=kotlin.Int value=2
              $handler: CONST Null type=kotlin.Any? value=null
            color: COMPOSITE type=androidx.compose.ui.graphics.Color origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.graphics.Color origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.graphics.Color
                v: CONST Long type=kotlin.Long value=0
            fontSize: COMPOSITE type=androidx.compose.ui.unit.TextUnit origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.TextUnit origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.unit.TextUnit
                v: CONST Long type=kotlin.Long value=0
            fontStyle: COMPOSITE type=androidx.compose.ui.text.font.FontStyle? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.font.FontStyle? value=null
            fontWeight: COMPOSITE type=androidx.compose.ui.text.font.FontWeight? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.font.FontWeight? value=null
            fontFamily: COMPOSITE type=androidx.compose.ui.text.font.FontFamily? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.font.FontFamily? value=null
            letterSpacing: COMPOSITE type=androidx.compose.ui.unit.TextUnit origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.TextUnit origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.unit.TextUnit
                v: CONST Long type=kotlin.Long value=0
            textDecoration: COMPOSITE type=androidx.compose.ui.text.style.TextDecoration? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.style.TextDecoration? value=null
            textAlign: COMPOSITE type=androidx.compose.ui.text.style.TextAlign? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.style.TextAlign? value=null
            lineHeight: COMPOSITE type=androidx.compose.ui.unit.TextUnit origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.TextUnit origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.unit.TextUnit
                v: CONST Long type=kotlin.Long value=0
            overflow: COMPOSITE type=androidx.compose.ui.text.style.TextOverflow origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.text.style.TextOverflow origin=null
                <T>: kotlin.Int
                <R>: androidx.compose.ui.text.style.TextOverflow
                v: CONST Int type=kotlin.Int value=0
            softWrap: COMPOSITE type=kotlin.Boolean origin=DEFAULT_VALUE
              CONST Boolean type=kotlin.Boolean value=false
            maxLines: COMPOSITE type=kotlin.Int origin=DEFAULT_VALUE
              CONST Int type=kotlin.Int value=0
            minLines: COMPOSITE type=kotlin.Int origin=DEFAULT_VALUE
              CONST Int type=kotlin.Int value=0
            onTextLayout: COMPOSITE type=kotlin.Function1<androidx.compose.ui.text.TextLayoutResult, kotlin.Unit>? origin=DEFAULT_VALUE
              CONST Null type=kotlin.Function1<androidx.compose.ui.text.TextLayoutResult, kotlin.Unit>? value=null
            style: COMPOSITE type=androidx.compose.ui.text.TextStyle? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.TextStyle? value=null
            $mask0: CONST Int type=kotlin.Int value=131068
            $handler: CONST Null type=kotlin.Any? value=null
      BRANCH
        if: CONST Boolean type=kotlin.Boolean value=true
        then: BLOCK type=kotlin.Unit origin=null
          CALL 'public final fun Column$default (modifier: androidx.compose.ui.Modifier?, verticalArrangement: androidx.compose.foundation.layout.Arrangement.Vertical?, horizontalAlignment: androidx.compose.ui.Alignment.Horizontal?, content: @[Composable] @[ExtensionFunctionType] kotlin.Function1<androidx.compose.foundation.layout.ColumnScope, kotlin.Unit>, $mask0: kotlin.Int, $handler: kotlin.Any?): kotlin.Unit [inline] declared in androidx.compose.foundation.layout.ColumnKt' type=kotlin.Unit origin=DEFAULT_DISPATCH_CALL
            modifier: CALL 'public final fun padding-3ABfNKs (all: androidx.compose.ui.unit.Dp): androidx.compose.ui.Modifier declared in androidx.compose.foundation.layout.PaddingKt' type=androidx.compose.ui.Modifier origin=null
              $receiver: CALL 'public final fun fillMaxSize$default (fraction: kotlin.Float, $mask0: kotlin.Int, $handler: kotlin.Any?): androidx.compose.ui.Modifier declared in androidx.compose.foundation.layout.SizeKt' type=androidx.compose.ui.Modifier origin=DEFAULT_DISPATCH_CALL
                $receiver: GET_FIELD 'FIELD FIELD_FOR_OBJECT_INSTANCE name:Companion type:androidx.compose.ui.Modifier.Companion visibility:public [final,static] declared in androidx.compose.ui.Modifier' type=androidx.compose.ui.Modifier.Companion origin=null
                fraction: COMPOSITE type=kotlin.Float origin=DEFAULT_VALUE
                  CONST Float type=kotlin.Float value=0.0
                $mask0: CONST Int type=kotlin.Int value=1
                $handler: CONST Null type=kotlin.Any? value=null
              all: CALL 'public final fun <get-dp> (): androidx.compose.ui.unit.Dp [inline] declared in androidx.compose.ui.unit.DpKt' type=androidx.compose.ui.unit.Dp origin=GET_PROPERTY
                $receiver: CONST Int type=kotlin.Int value=16
            verticalArrangement: COMPOSITE type=androidx.compose.foundation.layout.Arrangement.Vertical? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.foundation.layout.Arrangement.Vertical? value=null
            horizontalAlignment: COMPOSITE type=androidx.compose.ui.Alignment.Horizontal? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.Alignment.Horizontal? value=null
            content: BLOCK type=@[ExtensionFunctionType] kotlin.Function1<androidx.compose.foundation.layout.ColumnScope, kotlin.Unit> origin=LAMBDA
              COMPOSITE type=kotlin.Unit origin=null
              FUNCTION_REFERENCE 'private final fun NoteDetailScreen$lambda$2 ($note$delegate: androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?>): kotlin.Unit declared in com.kotlearn.jetpack_navigation_3.notes.detail.NoteDetailScreenKt' type=@[ExtensionFunctionType] kotlin.Function1<androidx.compose.foundation.layout.ColumnScope, kotlin.Unit> origin=INLINE_LAMBDA reflectionTarget=null
                $note$delegate: GET_VAR 'val note$delegate: androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?> [val] declared in com.kotlearn.jetpack_navigation_3.notes.detail.NoteDetailScreenKt.NoteDetailScreen' type=androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?> origin=null
            $mask0: CONST Int type=kotlin.Int value=6
            $handler: CONST Null type=kotlin.Any? value=null

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:48)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:41)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:405)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:422)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:167)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.generateFile$lambda$18(JvmIrCodegenFactory.kt:398)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:68)
	at org.jetbrains.kotlin.config.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:215)
	at org.jetbrains.kotlin.config.phaser.NamedCompilerPhase.invoke(CompilerPhase.kt:111)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:51)
	... 43 more
Caused by: org.jetbrains.kotlin.codegen.CompilationException: Back-end (JVM) Internal error: Couldn't inline method call: CALL 'public final fun remember <T> (key1: kotlin.Any?, calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=androidx.compose.runtime.MutableState<com.kotlearn.jetpack_navigation_3.notes.Note?> origin=null
Method: null
File is unknown
The root cause java.lang.IllegalStateException was thrown at: org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:128)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:65)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegen.genInlineCall(IrInlineCodegen.kt:163)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCallGenerator.genCall(IrInlineCallGenerator.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:594)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:135)
	at org.jetbrains.kotlin.ir.expressions.IrCall.accept(IrCall.kt:24)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:734)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:135)
	at org.jetbrains.kotlin.ir.declarations.IrVariable.accept(IrVariable.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:520)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:525)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:135)
	at org.jetbrains.kotlin.ir.expressions.IrBlockBody.accept(IrBlockBody.kt:20)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.generate(ExpressionCodegen.kt:237)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:124)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:45)
	... 52 more
Caused by: java.lang.IllegalStateException: couldn't find inline method Landroidx/compose/runtime/ComposablesKt;.remember(Ljava/lang/Object;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:128)
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.loadCompiledInlineFunction(SourceCompilerForInline.kt:97)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrSourceCompilerForInline.compileInlineFunction(IrSourceCompilerForInline.kt:92)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.compileInline(InlineCodegen.kt:42)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:50)
	... 67 more


